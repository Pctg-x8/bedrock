jobs:
  "check-format":
    name: Check Format
    needs:
    - "check-workflow-sync"
    - preconditions
    "runs-on": "ubuntu-latest"
    steps:
    - name: Checking out
      uses: "actions/checkout@v2"
    - name: Install Rust Toolchain
      uses: "actions-rs/toolchain@v1"
      with:
        toolchain: stable
    - name: Run Cargo
      uses: "actions-rs/cargo@v1"
      with:
        args: "-- --check"
        command: fmt
    - env:
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_ROLE_ARN: "arn:aws:iam::208140986057:role/GHALambdaInvoker"
        AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awstoken
      id: cfgNotification
      if: "failure()"
      name: Configure for Slack Notification
      run: |
        # re-export configs for further step
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

        curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/Pctg-x8/bedrock" | jq -r ".value" > $AWS_WEB_IDENTITY_TOKEN_FILE
    - if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: Check Format
        mode: branch
        report_name: Integrity Check
        status: failure
  "check-workflow-sync":
    name: Check Workflow Files are Synchronized
    needs:
    - preconditions
    "runs-on": "ubuntu-latest"
    steps:
    - name: Checking out
      uses: "actions/checkout@v2"
    - name: Setup Dhall
      run: |
        QUERY_STRING='query($cursor: String) { repository(owner: \"dhall-lang\", name: \"dhall-haskell\") { releases(first: 1, orderBy: { direction: DESC, field: CREATED_AT }) { nodes { releaseAssets(first: 10, after: $cursor) { nodes { name, downloadUrl }, pageInfo { hasNextPage, endCursor } } } } } }'
        QUERY_CURSOR='null'
        TARGET_FILE=""
        while :; do
          POSTDATA="{ \"query\": \"$QUERY_STRING\", \"variables\": { \"cursor\": $QUERY_CURSOR } }"
          API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d "$POSTDATA" https://api.github.com/graphql)
          TARGET_FILE=$(echo $API_RESPONSE | jq -r '.data.repository.releases.nodes[0].releaseAssets.nodes[] | select(.name | startswith("dhall-yaml") and contains("-Linux")).downloadUrl')
          if [[ $TARGET_FILE != "" ]]; then break; fi
          HAS_NEXT_PAGE=$(echo $API_RESPONSE | jq ".data.repository.releases.nodes[0].releaseAssets.pageInfo.hasNextPage")
          if [[ "$HAS_NEXT_PAGE" == "true" ]]; then
            QUERY_CURSOR=$(echo $API_RESPONSE | jq ".data.repository.releases.nodes[0].releaseAssets.pageInfo.endCursor")
          else
            echo "Latest dhall release does not contains dhall-yaml for linux platform!"
            exit 1
          fi
        done < <(cat)
        echo "$TARGET_FILE"
        mkdir $HOME/dhall
        curl -L $TARGET_FILE | tar x --bzip2 -C $HOME/dhall
        echo "$HOME/dhall/bin" >> $GITHUB_PATH
        sudo apt-get update
        sudo apt-get install -y colordiff
    - name: "test-sync"
      run: "make -C ./.github/workflows test-sync"
    - env:
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_ROLE_ARN: "arn:aws:iam::208140986057:role/GHALambdaInvoker"
        AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awstoken
      id: cfgNotification
      if: "failure()"
      name: Configure for Slack Notification
      run: |
        # re-export configs for further step
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

        curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/Pctg-x8/bedrock" | jq -r ".value" > $AWS_WEB_IDENTITY_TOKEN_FILE
    - if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-sync-workflow"
        mode: branch
        report_name: Integrity Check
        status: failure
  "document-deploy":
    name: Deploy Latest Document
    needs:
    - "check-workflow-sync"
    - preconditions
    - test
    - "check-format"
    "runs-on": "ubuntu-latest"
    steps:
    - name: Checking out
      uses: "actions/checkout@v2"
    - name: Install Rust Toolchain
      uses: "actions-rs/toolchain@v1"
      with:
        toolchain: nightly
    - name: Run Cargo
      uses: "actions-rs/cargo@v1"
      with:
        args: "--features Implements,Multithreaded,Presentation,VK_EXT_debug_report -- --cfg docsrs"
        command: rustdoc
        toolchain: nightly
    - env:
        FIREBASE_TOKEN: "${{ secrets.DOC_HOST_FIREBASE_TOKEN }}"
      name: "Deployment to Firebase Hosting (for Peridot branch)"
      uses: "./.github/actions/deployment-doc-peridot"
    - env:
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_ROLE_ARN: "arn:aws:iam::208140986057:role/GHALambdaInvoker"
        AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awstoken
      id: cfgNotification
      if: "failure()"
      name: Configure for Slack Notification
      run: |
        # re-export configs for further step
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

        curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/Pctg-x8/bedrock" | jq -r ".value" > $AWS_WEB_IDENTITY_TOKEN_FILE
    - if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: Deploy Latest Document
        mode: branch
        report_name: Integrity Check
        status: failure
  preconditions:
    name: Preconditions
    outputs:
      begintime: "${{ steps.begintime.outputs.begintime }}"
      has_code_changes: "${{ steps.fileck.outputs.has_code_changes }}"
      has_workflow_changes: "${{ steps.fileck.outputs.has_workflow_changes }}"
    "runs-on": "ubuntu-latest"
    steps:
    - id: begintime
      name: Getting begintime
      run: "echo \"::set-output name=begintime::$(date +%s)\""
  "report-success":
    name: Report as Success
    needs:
    - preconditions
    - "check-workflow-sync"
    - test
    - "check-format"
    - "document-deploy"
    "runs-on": "ubuntu-latest"
    steps:
    - name: Checking out
      uses: "actions/checkout@v2"
    - env:
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_ROLE_ARN: "arn:aws:iam::208140986057:role/GHALambdaInvoker"
        AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awstoken
      id: cfgNotification
      name: Configure for Slack Notification
      run: |
        # re-export configs for further step
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

        curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/Pctg-x8/bedrock" | jq -r ".value" > $AWS_WEB_IDENTITY_TOKEN_FILE
    - name: Notify
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        mode: branch
        report_name: Integrity Check
        status: success
  test:
    name: Run Tests
    needs:
    - "check-workflow-sync"
    - preconditions
    "runs-on": "ubuntu-latest"
    steps:
    - name: Checking out
      uses: "actions/checkout@v2"
    - name: Install Rust Toolchain
      uses: "actions-rs/toolchain@v1"
      with:
        toolchain: stable
    - name: Run Cargo
      uses: "actions-rs/cargo@v1"
      with:
        args: "--features Presentation,VK_EXT_debug_report"
        command: test
    - env:
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_ROLE_ARN: "arn:aws:iam::208140986057:role/GHALambdaInvoker"
        AWS_WEB_IDENTITY_TOKEN_FILE: /tmp/awstoken
      id: cfgNotification
      if: "failure()"
      name: Configure for Slack Notification
      run: |
        # re-export configs for further step
        echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

        curl -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://github.com/Pctg-x8/bedrock" | jq -r ".value" > $AWS_WEB_IDENTITY_TOKEN_FILE
    - if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: Run Tests
        mode: branch
        report_name: Integrity Check
        status: failure
name: Integrity Check
'on': push
